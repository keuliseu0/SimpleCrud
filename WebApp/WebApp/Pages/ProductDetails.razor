@page "/product"
@page "/product/{id}"
@using Core.Application.Services;
@using Core.Domain.Entities;
@inject IProductService ProductService

@if (string.IsNullOrEmpty(Id))
{
    <PageTitle>Add New Product</PageTitle>
    <h3>Add New Product</h3>
}
else
{
    <PageTitle>Manage Product</PageTitle>
    <h3>Manage Product</h3>
}

<div class="col-12">
    <EditForm Model="@productContainer" OnValidSubmit="@HandleValidRequest" OnInvalidSubmit="@HandleFailedRequest">
        <div class="card">
            <div class="card-header ui-sortable-handle" style="cursor: move;">
                <h3 class="card-title">
                    <i class="fas fa-chart-pie mr-1"></i>
                    Add New
                </h3>
            </div>
            <div class="card-body">
                <div class="form-group row">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="col-6">
                        <label>Name:</label>
                        <input type="text" class="form-control" @bind-value="@productContainer.Name" />
                        <ValidationMessage For="@(() =>@productContainer.Name)"/>
                    </div>
                    <div class="col-6">
                        <label>Price:</label>
                        <input type="number" class="form-control" min="0" @bind-value="@productContainer.Price" />
                        <ValidationMessage For="@(() =>@productContainer.Price)" />
                    </div>
                    <div class="col-12">
                        <label>Description:</label>
                        <input type="text" class="form-control" @bind-value="@productContainer.Description" />
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="col-12 text-center">
                    <button type="submit" class="btn btn-primary">Save Product</button> &nbsp;
                    <a @onclick="@GotoProducts" class="btn btn-warning">Back</a> &nbsp;
                    @if (!string.IsNullOrEmpty(Id))
                    {
                        <a @onclick="@DeleteProduct" class="btn btn-danger">Delete</a>
                    }
                </div>
            </div>
        </div>
        <p>@Message</p>
    </EditForm>
</div>

@code {
    protected string Message = string.Empty;
    // protected Product product { get; set; } = new Product();
    public Product productContainer = new Product();

    [Parameter]
    public string Id { get; set; } = string.Empty;
    [Inject]

    private NavigationManager navigationManager { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {

        if (!string.IsNullOrEmpty(Id))
        {
            Guid guid = Guid.Empty;
            Guid.TryParse(Id, out guid);
            var productId = Id;
            var productRes = await ProductService.GetProduct(guid);
            if (productRes != null)
            {
                productContainer = productRes;
            }
        }
        else
        {

        }
    }

    protected void HandleFailedRequest()
    {
        Message = "Something went wrong.";
    }

    public void GotoProducts()
    {
        navigationManager.NavigateTo("/");
    }

    public async Task DeleteProduct()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            Guid guid = Guid.Empty;
            Guid.TryParse(Id, out guid);
            var productId = Id;
            var productRes = await ProductService.DeleteProduct(guid);
            if (productRes.IsSuccessStatusCode)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                Message = "Something went wrong. Product not deleted.";
            }
        }
    }

    public async void HandleValidRequest()
    {
        if (string.IsNullOrEmpty(Id))
        {
            var productRes = await ProductService.AddProduct(productContainer);
            if (productRes.IsSuccessStatusCode)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                Message = "Something went wrong. Please check your entry and fill them properly.";
            }
        }
        else
        {
            var productRes = await ProductService.UpdateProduct(productContainer);
            if (productRes.IsSuccessStatusCode)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                Message = "Something went wrong. Please check your entry and fill them properly.";
            }
        }
    }
}
